# Check for a .configured file generated by configure script
ifeq ($(wildcard .configured),)
$(error You must run `./configure` before you can build.)
endif

BUILDTARGET ?=
ifeq ($(strip $(BUILDTARGET)),)
	TARGETARG:=
else
	TARGETARG:=--target=$(BUILDTARGET)
endif

BUILDLINKER ?=
ifeq ($(strip $(BUILDLINKER)),)
	LINKER:=
else
	LINKER:=-C linker=$(BUILDLINKER)
endif

RC = @RC@
CC = @CC@

ifneq ($(strip $(BUILDLINKER)),)
ifneq ($(strip $(BUILDLINKER)),$(CC))
$(warning Your CC and BUILDLINKER do not match. If this is intentional and you know what you're doing, just ignore this. Otherwise, we recommend setting CC and BUILDLINKER to the same thing.)
endif
endif

CONFIG ?=

ifeq ($(CONFIG),--release)
	ifeq ($(strip $(BUILDTARGET)),)
		COPY_RESULT = cp target/release/dproc bin/dproc
	else
		COPY_RESULT = cp target/$(BUILDTARGET)/release/dproc bin/dproc
	endif
else
	ifeq ($(strip $(BUILDTARGET)),)
		COPY_RESULT = cp target/debug/dproc bin/dproc
	else
		COPY_RESULT = cp target/$(BUILDTARGET)/debug/dproc bin/dproc
	endif
endif

INCLUDE_LIBMYSOLVERS = @INCLUDE_LIBMYSOLVERS@
BUILD_GUI = @BUILD_GUI@

CARGO = @CARGO@
RUSTFLAGS += -Anon_snake_case
RUSTFLAGS += $(LINKER)
CPPFLAGS ?=
CFLAGS ?=
LDFLAGS ?=
BIN = bin/dproc
GUIBIN = bin/dproc-gui
BINDIR = bin
SRC = src/main.rs
PREFIX ?= @PREFIX@
NOREMOVEPREFIXES = /usr /usr/local /opt/local /opt/homebrew
GNSRCDIR ?= /tmp/e10b5eccac1ecb4e8706e3898719b197a1e9d10d65e860192d38155cb31233ea

all: build

build: src/*
	mkdir -p bin
	$(MAKE) build-libmysolvers
	RUSTFLAGS="$(RUSTFLAGS)" RUSTC="$(RC)" $(CARGO) build $(TARGETARG) $(CONFIG)
	$(COPY_RESULT)
	$(MAKE) build-gui
	cp gui/dist/* bin/

build-libmysolvers:
	mkdir -p obj
	$(CC) $(CPPFLAGS) $(CFLAGS) -c lib/libmysolvers.c -o obj/libmysolvers.o
	ar rcs obj/libmysolvers.a obj/libmysolvers.o

build-gui:
ifeq ($(BUILD_GUI), TRUE)
	$(MAKE) gui/venv
	cd gui && \
	if [ -f venv/bin/activate ]; then \
		. venv/bin/activate; \
	elif [ -f venv/Scripts/activate ]; then \
		. venv/Scripts/activate; \
	else \
		echo "No virtual environment found"; \
		exit 1; \
	fi; \
	python build.py --release && \
	cd ..
endif

gui/venv:
	cd gui && \
	python -m venv venv && \
	if [ -f venv/bin/activate ]; then \
		. venv/bin/activate; \
	elif [ -f venv/Scripts/activate ]; then \
		. venv/Scripts/activate; \
	else \
		echo "No virtual environment found"; \
		exit 1; \
	fi; \
	pip install -r requirements.txt && \
	cd ..

upgrade-c-libs:
	cd lib && \
	curl -LO https://raw.githubusercontent.com/matthewyang204/libmysolvers/refs/heads/main/libmysolvers.c && \
	curl -LO https://raw.githubusercontent.com/matthewyang204/libmysolvers/refs/heads/main/libmysolvers.h

clean:
	rm -rf $(BINDIR)
	rm -rf build
	rm -rf dist
	rm -rf obj
	rm -rf target
	$(MAKE) clean-gui

clean-gui:
	rm -rf gui/build
	rm -rf gui/dist
	rm -rf gui/venv
	rm -rf gui/*.spec

install_libmysolvers:
ifeq ($(INCLUDE_LIBMYSOLVERS),TRUE)
	echo "Installing libmysolvers to $(PREFIX)..."
	mkdir -p $(PREFIX)/include
	mkdir -p $(PREFIX)/lib
	cp lib/libmysolvers.h $(PREFIX)/include/
	cp obj/libmysolvers.a $(PREFIX)/lib/
endif

install_gui:
ifeq ($(BUILD_GUI), TRUE)
	echo "Installing dproc-gui to $(PREFIX)..."
	mkdir -p $(PREFIX)/$(BINDIR)
	rm -rf $(PREFIX)/$(GUIBIN)
	cp $(GUIBIN) $(PREFIX)/$(GUIBIN)
endif

install:
	echo "Installing dproc to $(PREFIX)..."
	mkdir -p $(PREFIX)/$(BINDIR)
	rm -rf $(PREFIX)/$(BIN)
	cp $(BIN) $(PREFIX)/$(BIN)
	$(MAKE) install_libmysolvers
	$(MAKE) install_gui

uninstall:
	rm -rf $(PREFIX)/$(BIN)
ifeq ($(INCLUDE_LIBMYSOLVERS),TRUE)
ifeq ($(filter $(PREFIX),$(NOREMOVEPREFIXES)),)
	rm -rf $(PREFIX)/include/libmysolvers.h
	rm -rf $(PREFIX)/lib/libmysolvers.a
endif
endif
ifeq ($(BUILD_GUI), TRUE)
ifeq ($(filter $(PREFIX),$(NOREMOVEPREFIXES)),)
	rm -rf $(PREFIX)/$(GUIBIN)
endif
endif

dist: clean
	rm -rf $(GNSRCDIR)
	cp -R . $(GNSRCDIR)
	mkdir -p dist
	find $(GNSRCDIR) -type d -name ".git" -print
	find $(GNSRCDIR) -type d -name ".git" -exec rm -rf {} +
	tar -cvJf dist/dproc-1.1.1.tar.xz -C $(GNSRCDIR) .
	rm -rf $(GNSRCDIR)

.PHONY: all build clean install uninstall
